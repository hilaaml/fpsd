#include <iostream>

using namespace std;

const int maxPlayer = 4;
int totalPlayer;
int playerCount = 0;

struct Player {
    string playerName;
    int playerScore;
} P[maxPlayer];

struct Word {
    string word;
    string hint;
};

Word wordList[] = {
                            {"kuda", "Mamalia berkuku ganjil dan oval, kepalanya memanjang, tengkuknya bersurai, ekornya panjang, serta biasa dipiara sebagai kendaraan (tunggangan, angkutan) atau penarik kendaraan."},
                            /*{"kucing", "Mamalia karnivor yang berukuran kecil hingga sedang, memiliki cakar berbentuk arit yang dapat keluar masuk dari kantong jari-jarinya, termasuk hewan teritorial."},
                            {"ular", "Reptilia, tidak berkaki, tubuhnya agak bulat memanjang, kulitnya bersisik, hidup di tanah atau di air, ada yang berbisa ada yang tidak."},
                            {"sapi", "Mamalia berkuku genap yang termasuk ke dalam kelompok ruminansia, bertubuh besar, bertanduk, berkaki empat, dipelihara untuk diambil daging dan susunya."},
                            {"ayam", "Unggas yang pada umumnya tidak dapat terbang, dapat dijinakkan dan dipelihara, berjengger, yang jantan berkokok dan bertaji, sedangkan yang betina berkotek dan tidak bertaji."}*/
};
const int wordListTotal = sizeof(wordList) / sizeof(wordList[0]);

void leaderboards(); // Sorting
void playStart(Player& player); // Searching
void playQueue(); // Queue
void playerAdd(); // Struct, array
bool playerNameSame(string temp); // Mengecek nama player duplikat

int main()
{
    int pilih;
    do {
        cout << "Permainan Tebak Kata\n";
        cout << "Menu:\n1. Mulai main\t\t\t3. Papan Skor \n2. Tambah Antrian Pemain  \t0. Keluar\n\n";
        cout << "Masukkan pilihan = "; cin >> pilih;
        system("cls");
        switch (pilih) {
        case 0:
            break;
        case 1:
            if (playerCount == 0) {
                cout << "Permainan gagal dimulai. ";
                playerAdd();
            }
            else {
                if (wordListTotal < totalPlayer) {
                    cout << "Maaf jumlah player yang akan ditebak melebihi jumlah kata yang ditebak.";
                } else {
                    playQueue();
                }
            }
            break;
        case 2:
            playerAdd();
            break;
        case 3:
            leaderboards();
            break;
        default:
            cout << "Pilihan salah.";
        }
        cout << "\n";
    } while (pilih != 0);
    return 0;
}

bool playerNameSame(string temp) {
    for (int i = 0; i < playerCount; i++) {
        if (P[i].playerName == temp) {
            return true;
        }
    }
    return false;
}

void playerAdd() {
    cout << "Jumlah pemain saat ini adalah " << playerCount << ". " << endl;
    for (int i = 0; i < playerCount; i++) {
        cout << i + 1 << ". " << P[i].playerName << "\n";
    }
    cout << "Masukkan jumlah pemain = "; cin >> totalPlayer;
    if (totalPlayer + playerCount <= maxPlayer && totalPlayer + playerCount <= wordListTotal) {
        for (int i = 0; i < totalPlayer; i++) {
            string temp;
            cout << "Masukkan nama pemain ke-" << (playerCount + 1) << " = ";
            cin >> temp;
            if (playerNameSame(temp)) {
                cout << "Nama pemain sudah ada. Silahkan masukkan nama lain." << endl;
                i--;
            }
            else {
                P[playerCount].playerName = temp;
                P[playerCount].playerScore = 0;
                playerCount++;
            }
        }
    }
    else {
        cout << "Maaf, jumlah pemain melebihi jumlah pemain maksimal ("<< maxPlayer <<") atau jumlah kata yang tersedia (" << wordListTotal << ").\n";
    }
}

void leaderboards() {
    int i, j;
    Player temp;
    for (i = 1; i < playerCount; i++) {
        temp = P[i];
        j = i - 1;

        while ((j >= 0) && (P[j].playerScore < temp.playerScore)) {
            P[j + 1] = P[j];
            j--;
        }
        P[j + 1] = temp;
    }
    cout << "Peringkat\tNama Pemain\tSkor\n";
    for (int i = 0; i < playerCount; i++) {
        cout << i + 1 << ".\t\t" << P[i].playerName << "\t\t" << P[i].playerScore << endl;
    }
}

void playQueue() {
    for (int i = 0; i < playerCount; i++) {
        char playChoice;
        cout << "Giliran " << P[i].playerName << " bermain.\n";
        cout << "Apakah Anda ingin bermain? (y/n): "; cin >> playChoice;
        system("cls");
        if (playChoice == 'y' || playChoice == 'Y') {
            playStart(P[i]);
            cout << "Skor " << P[i].playerName << " adalah: " << P[i].playerScore << "\n";
        }
        else {
            cout << "Player " << P[i].playerName << " melewati giliran." << endl;
            cout << "Skor " << P[i].playerName << " adalah: " << P[i].playerScore << "\n";
        }
    }
}

void displayStatus(const string& word, const string& guessed) {
    for (char characterToCheck : word) {
        if (guessed.find(characterToCheck) != string::npos) {
            cout << characterToCheck << " ";
        }
        else {
            cout << "_ ";
        }
    }
    cout << endl;
}

void playStart(Player& player) {
    static int currentWordIndex = 0;
    if (currentWordIndex >= wordListTotal) {
        cout << "Maaf, tidak ada lagi kata yang bisa ditebak.\n";
        return;
    }
    Word wordToGuess = wordList[currentWordIndex];
    string guessedLetters = "";
    int attemptsLeft = wordToGuess.word.length() / 2;
    while (attemptsLeft > 0) {
        string guess;
        cout << "Hint: " << wordToGuess.hint << endl;
        displayStatus(wordToGuess.word, guessedLetters);
        cout << "Masukkan tebakan Anda: "; cin >> guess;
        system("cls");
        bool validInput = true;
        for (char characterToCheck : guess) {
            if (!isalpha(characterToCheck)) {
                validInput = false;
                break;
            }
        }
        if (!validInput) {
            cout << "Masukkan hanya huruf." << endl;
            continue;
        }
        if (guess.length() != 1 && guess.length() != wordToGuess.word.length()) {
            cout << "Masukkan satu huruf atau tebakan yang sesuai dengan panjang kata." << endl;
            continue;
        }
        if (guessedLetters.find(guess) != string::npos) {
            cout << "Anda sudah menebak huruf/kata ini sebelumnya." << endl;
            continue;
        }
        guessedLetters += guess;
        bool correctGuess = true;
        for (char characterToCheck : guess) {
            if (wordToGuess.word.find(characterToCheck) == string::npos) {
                correctGuess = false;
                break;
            }
        }
        if (correctGuess) {
            cout << "Tebakan Anda benar!" << endl;
        }
        else {
            cout << "Tebakan Anda salah!" << endl;
            attemptsLeft--;
            cout << "Kesempatan yang tersisa: " << attemptsLeft << endl;
        }
        bool allGuessed = true;
        for (char characterToCheck : wordToGuess.word) {
            if (guessedLetters.find(characterToCheck) == string::npos) {
                allGuessed = false;
                break;
            }
        }
        if (allGuessed) {
            cout << "Selamat! Anda berhasil menebak kata " << wordToGuess.word << ".\n";
            player.playerScore += 10;
            currentWordIndex++;
            return;
        }
    }
    cout << "Kesempatan Anda habis! Kata yang harus ditebak adalah " << wordToGuess.word << ".\n";
    currentWordIndex++;
}
